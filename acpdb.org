#+STARTUP: showeverything

* Evaluations

ACPEVAL name.s [output.s]

  Evaluate the ACP with name name.s on the current training set. If an
  ACP with that name does not exist, try to find an ACP file with that
  name and evaluate it. If output.s is given, write the output to that
  file instead of the standard output

EMPTYEVAL [output.s]

  Evaluate the empty for the current training set. If output.s is
  given, write the output to that file instead of the standard output

* Structure writers and result readers

WRITE TERMS
  METHOD method.s
  SET set.s
  DIRECTORY dir.s
  PACK ipack.i
END

  Write the structures in the given set to input files for the
  calculation of the ACP terms in the training set. If no METHOD is
  given, use the training set empty.

  If SET is not present, write all the structures in the training
  set. If SET is present, write the training set structures under that
  alias.

  The files are written to directory dir.s (default: ./). If PACK is
  present, create tar.xz compressed archives with at most ipack.i
  structures each (only if the number of structures is greater than
  ipack.i). The PACK keyword invokes the tar utility through a
  system() call.

  For now, terms can be written only as Gaussian inputs.

READ TERMS file.s
  METHOD method.s
END

  Read calculated ACP terms from file.s for method method.s. If no
  method is given, the empty method for the current training set is
  used. The file must have lines of the form:

    structure1.s value1.r
    structure2.s value2.r
    ...

  where structurex.s are structure identifiers from the database and
  valuex.r are the calculated values (typically, energies) for those
  structures. Several values must be given for each structure. To be
  inserted into the terms table in the database, the number of values
  given by the file for a structure must be the same as the number of
  ACP terms in the training set. The structure names are the same as
  the root of the file names generated using WRITE, so this file can
  be easily generated with utilities such as grep or awk. Blank lines
  and comments (#) are ignored. Only the first two fields in each line
  are read; the rest are ignored.

* High-level operations

INSERT DAT
 FILE datfile.s
 METHOD method.s
 [TERM zat.i l.i exp.r]
END

  Insert the data file datfile.s. To do this, the training set must be
  defined and the data file must contain exactly the same number of
  lines as properties in the training set, with one numerical value
  per line. If only METHOD is present, the data is inserted as an
  evaluation for that method on the training set. If TERM is given
  with valid atomic number (zat.i), angular momentum (l.i), and
  exponent (exp.r) from the training set, then the data is inserted as
  that term for the corresponding method. Due to the nature of this
  operation, avoid having NOFIT subsets in the training set when using
  INSERT DAT.

INSERT OLDDAT [directory.s] [NOREFERENCE]

  Insert data in bulk from old-style ACP data files. Requires the
  definition of a complete training set.

  The data files all reside in the indicated directory (in ./ if not
  given). This command first searches for the file called names.dat,
  and verifies that the names in it match with those in the current
  training set. This is done to ensure the integrity of the
  database. After this operation is complete, the following data is
  read and inserted:

  - ref.dat: evaluation of the reference method in the training
    set. The reference is not inserted if NOREFERENCE is present.

  - empty.dat: evaluation of the empty method in the training set.

  - x_y_z.dat, where x is the atom (lowercase symbol), y is the
    angular momentum (lowercase), and z is the exponent index. Insert
    the corresponding ACP term.

  In all cases, the insertion verifies that the file contains exactly
  the same number of entries as the current training set. Due to the
  nature of this operation, avoid having NOFIT subsets in the training
  set when using INSERT OLDDAT.

DUMP

  Write the octavedump.dat file for the LASSO fit corresponding to the
  current dataset.

* Database schema

-- copy over from the code --

own implementation of LASSO in c++

-------

build all the databases
automatic testing on github & upload zz_source

-------

- Robust running of Gaussian and other inputs?

2. Generate data set table for training set, with references

----- db-design.org

* Generate input files, read output files

WRITE [METHOD method.s] [ACP acp.s] [SET set.s] [DIRECTORY dir.s] 

  Write the input files corresponding to the current training set and
  current approximate method (EMPTY). If METHOD is given, use method.s
  instead of the empty. If SET is given, use set set.s
  only. If ACP is given, include the ACP in the input files. If
  DIRECTORY is given, place the input files in directory dir.s.

READ [SET set.s] [COMPARE method.s] [FILE file.s] [DIRECTORY dir.s] 
                 [INSERT method.s] [ACP acp.s]

  Read the outputs corresponding to the current training set and
  compare to the original data. If SET is given, consider only set
  set.s. If COMPARE is given, compare to method.s instead of the
  original reference data. If DIRECTORY is given, read them from
  directory dir.s. If FILE is given, read them from summary file
  file.s. If INSERT is given, enter the corresponding items into table
  7 using method method.s. If the entries already exist, verify the
  value is within an acceptable threshold.  If ACP is given,
  compare the results to the linear model given by the current dataset
  applied to ACP acp.s.

  This command flags failed calculations for the user.

WRITE TERMS [SET set.s] [DIRECTORY dir.s]

  Write the input files corresponding to the ACP term calculations for
  set.s using the current dataset. If SET is given, use only set.s;
  otherwise, use the whole training set. If DIRECTORY is given, place
  the input files in directory dir.s.

READ TERMS [SET set.s] [FILE file.s] [DIRECTORY dir.s] [INSERT]

  Read the ACP term outputs corresponding to the current dataset. If
  SET is given, use set set.s instead of the whole training set. If
  DIRECTORY is given, read them from directory dir.s. If FILE is
  given, read them from summary file file.s. If INSERT is given, enter
  the corresponding ACP term information into table 8. If the entries
  already exist, verify the value is within an acceptable threshold.

  This command flags failed calculations for the user.

DUMP

  Write the octavedump.m file for the LASSO fit corresponding to the
  current dataset.

WRITE NONLIN [SET set.s] [METHOD method.s] [DIRECTORY dir.s]

  Write input files for the evaluation of non-linearity error in the
  current dataset. If SET is given, use set set.s instead of the whole
  tranining set. If METHOD is given, use approximate method
  method.s. If DIRECTORY is given, write the files to directory dir.s.

READ NONLIN [SET set.s] [DIRECTORY dir.s] [FILE file.s] [INSERT]

  Read the output files for the evaluation of non-linearity error in
  the current dataset. If SET is given, use set set.s instead of the
  whole training set. If DIRECTORY is given, read the output files
  from directory dir.s. If FILE is given, read the output data summary
  from file file.s. The maximum coefficients for each ACP terms are
  calculated with this command. If INSERT is present, insert the
  maximum coefficient information into the database.

  This command flags failed calculations for the user.

ACP EVAL acp.s [SET set.s]

  Evaluate ACP acp.s using the linear model specified by the current
  dataset. If SET is given, only for set set.s.

--- Operations to implement ---

* Dataset definition

1. Define target atoms for the ACP
2. Define the subsets/items of the training set
3. Define ACP exponent values
4. Define reference data level
5. Define weights, perhaps with weight scheme suggestions
6. Define approximate method that is the target for the ACP
7. Define additional energy contributions, maybe marked as active for the fit

* Subsets:

1. Define named sets from items of the database and subsets of the training set

* Database: entry and subset definitions

9. Write xyz/cif files corresponding to an item/subset

* Database: reference data

1. Register a new reference calculation method
2. Delete a reference calculation method
3. Generate input files for reference calculations (item/subset)
4. Read output files and calculate reference data (item/subset)
5. Read user-formatted reference data (item/subset)
6. Insert reference data into the database (item/subset)
7. Verify entry in the database (item/subset)
8. List reference data (item/subset)
9. Validate the templates for a calculation method entry in database

* Database: approximate methods & additional energy contributions

1.  Register a new approximate method as target for ACP development
2.  Register a new additional energy contribution
3.  Delete an approximate method
4.  Delete an additional energy contribution
5.  Generate input files for empty calculations (item/subset)
6.  Generate input files for additional energy contributions (item/subset)
7.  Read output files and calculate empty stats, maybe w additional contributions (item/subset)
8.  Read user-formatted data for empty or additoinal contributions (item/subset)
9.  Insert empty data into the database (item/subset)
10. Insert additional contribution data into the database (item/subset)
11. Verify approximate method entry in the database (item/subset)
12. Verify additional contribution entry in the database (item/subset)
13. List empty/additional contribution data (item/subset)
14. Validate the templates for a calculation method entry in database

* Database: ACP term evaluations

1. Generate input files for ACP term evaluations (item/subset)
2. Read output files and calculate ACP terms (item/subset)
3. Read user-formatted ACP term data (item/subset)
4. Insert ACP term data into the database (item/subset)
5. Verify ACP term data (item/subset)
6. List known ACP terms (item/subset)

* Database: ACP fitting

1. Write the octavedump.m file for the LASSO fit

* ACP operations (basic)

1. Read an ACP in Gaussian-style format
2. Read an ACP from a Gaussian/crystal input file
3. Read an ACP from user-formatted specification
4. Write an ACP in Gaussian-style format
5. Calculate the 1-norm, etc. of an ACP
6. Calculate the 1-distance, etc. of two or more ACPs
7. Separate an ACP with n terms into n ACPS with 1 term each

* ACP operations (require dataset)

1. Evaluate an ACP using the linear model from the current dataset
2. Generate input files for self-consistent evaluation of an ACP (item/subset)
3. Read output files and calculate self-consistent ACP stats (item/subset)
4. Compare self-consistent ACP to linear model stats (item/subset)
5. Generate input files for non-linearity error evaluation in individual ACP terms
6. Process output for non-linearity error evaluation and generate maxcoef file
7. Enter maximum coefficient information into the database
8. List maximum coefficient information in the database
9. Delete maximum coefficient information from the database
??10. Sensitivity analysis/cross-validation of an ACP using the linear model : reqs' lasso.m??

* Miscellaneous auxiliary operations

1. Process a list of calculations and flag failed calcs (item/subset)
2. Generate data set table for training set, with references

* Topics to examine

- Robust running of Gaussian and other inputs

