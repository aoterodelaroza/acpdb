#+STARTUP: showeverything


TRAINING INSERT datfile.s [EMPTY|TERM zat.i l.i exp.r]
(insert_dat)

  Insert the data file datfile.s. To do this, the training set must be
  defined and the data file must contain exactly the same number of
  lines as properties in the training set, with one numerical value
  per line. If only METHOD is present, the data is inserted as an
  evaluation for that method on the training set. If TERM is given
  with valid atomic number (zat.i), angular momentum (l.i), and
  exponent (exp.r) from the training set, then the data is inserted as
  that term for the corresponding method. Due to the nature of this
  operation, avoid having NOFIT subsets in the training set when using
  INSERT DAT.

insert_dat

----

WRITE
  [TEMPLATE file.s]
  [TEMPLATE_MOL filemol.s]
  [TEMPLATE_CRYS filecrys.s]
  [SET {set.s|set.i}]
  [TRAINING [alias.s]]
  [TERMS prefix.s]
  [DIRECTORY dir.s]
  [PACK ipack.i]
  [ACP {name.s|file.s}]
END

INSERT TERMS
  PROPERTY_TYPE {prop.s|prop.i}
  FILE file.s
  METHOD {method.s|method.i}
END

* Structure writers and result readers

WRITE TERMS
  METHOD method.s
  SET set.s
  DIRECTORY dir.s
  PACK ipack.i
END

  Write the structures in the given set to input files for the
  calculation of the ACP terms in the training set. If no METHOD is
  given, use the training set empty.

  If SET is not present, write all the structures in the training
  set. If SET is present, write the training set structures under that
  alias.

  The files are written to directory dir.s (default: ./). If PACK is
  present, create tar.xz compressed archives with at most ipack.i
  structures each (only if the number of structures is greater than
  ipack.i). The PACK keyword invokes the tar utility through a
  system() call.

  For now, terms can be written only as Gaussian inputs.

READ TERMS file.s
  METHOD method.s
END

  Read calculated ACP terms from file.s for method method.s. If no
  method is given, the empty method for the current training set is
  used. The file must have lines of the form:

    structure1.s value1.r
    structure2.s value2.r
    ...

  where structurex.s are structure identifiers from the database and
  valuex.r are the calculated values (typically, energies) for those
  structures. Several values must be given for each structure. To be
  inserted into the terms table in the database, the number of values
  given by the file for a structure must be the same as the number of
  ACP terms in the training set. The structure names are the same as
  the root of the file names generated using WRITE, so this file can
  be easily generated with utilities such as grep or awk. Blank lines
  and comments (#) are ignored. Only the first two fields in each line
  are read; the rest are ignored.

* High-level operations

INSERT OLDDAT [directory.s] [NOREFERENCE]

  Insert data in bulk from old-style ACP data files. Requires the
  definition of a complete training set.

  The data files all reside in the indicated directory (in ./ if not
  given). This command first searches for the file called names.dat,
  and verifies that the names in it match with those in the current
  training set. This is done to ensure the integrity of the
  database. After this operation is complete, the following data is
  read and inserted:

  - ref.dat: evaluation of the reference method in the training
    set. The reference is not inserted if NOREFERENCE is present.

  - empty.dat: evaluation of the empty method in the training set.

  - x_y_z.dat, where x is the atom (lowercase symbol), y is the
    angular momentum (lowercase), and z is the exponent index. Insert
    the corresponding ACP term.

  In all cases, the insertion verifies that the file contains exactly
  the same number of entries as the current training set. Due to the
  nature of this operation, avoid having NOFIT subsets in the training
  set when using INSERT OLDDAT.

DUMP

  Write the octavedump.dat file for the LASSO fit corresponding to the
  current dataset.

* Database schema

-- copy over from the code --
-- build energy differences from total energies --
-- own implementation of LASSO in c++ --

-------

build all the databases
automatic testing on github & upload zz_source

-------

- Robust running of Gaussian and other inputs?

2. Generate data set table for training set, with references

----- db-design.org

WRITE NONLIN [SET set.s] [METHOD method.s] [DIRECTORY dir.s]

  Write input files for the evaluation of non-linearity error in the
  current dataset. If SET is given, use set set.s instead of the whole
  tranining set. If METHOD is given, use approximate method
  method.s. If DIRECTORY is given, write the files to directory dir.s.

READ NONLIN [SET set.s] [DIRECTORY dir.s] [FILE file.s] [INSERT]

  Read the output files for the evaluation of non-linearity error in
  the current dataset. If SET is given, use set set.s instead of the
  whole training set. If DIRECTORY is given, read the output files
  from directory dir.s. If FILE is given, read the output data summary
  from file file.s. The maximum coefficients for each ACP terms are
  calculated with this command. If INSERT is present, insert the
  maximum coefficient information into the database.

  This command flags failed calculations for the user.

--- Operations to implement ---

* ACP operations (require dataset)

1. Evaluate an ACP using the linear model from the current dataset
2. Generate input files for self-consistent evaluation of an ACP (item/subset)
3. Read output files and calculate self-consistent ACP stats (item/subset)
4. Compare self-consistent ACP to linear model stats (item/subset)
5. Generate input files for non-linearity error evaluation in individual ACP terms
6. Process output for non-linearity error evaluation and generate maxcoef file
7. Enter maximum coefficient information into the database
8. List maximum coefficient information in the database
9. Delete maximum coefficient information from the database
??10. Sensitivity analysis/cross-validation of an ACP using the linear model : reqs' lasso.m??

* Miscellaneous auxiliary operations

1. Process a list of calculations and flag failed calcs (item/subset)
2. Generate data set table for training set, with references
