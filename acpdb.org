#+STARTUP: showeverything

* Keywords (define the training set)

ATOM|ATOMS [at1.s l1.i at2.s l2.i ... ]

  Define the atoms for which ACPs will be fitted and the maximum
  angular momentum channel for each. If no atoms are given, clear
  the atom list.

EXP|EXPONENT|EXPONENTS exp1.r exp2.r ...

  List of exponents.

REFERENCE method.s

  Set the reference method to method.s for the whole training set.

SUBSET [alias.s]
 SET name.s
 NOFIT
 MASK RANGE start.i [end.i [step.i]]
 MASK ITEMS item1.i item2.i ...
 MASK PATTERN 0/1 0/1 ...
 MASK ATOMS
 WEIGHT_GLOBAL w.r
 WEIGHT_PATTERN w1.r w2.r w3.r w4.r...
 NORM_REF
 NORM_NITEM
 NORM_NITEMSQRT
 WEIGHT_ITEMS i1.i w1.r i2.i w2.r ...
END

  Add a subset to the training set with alias alias.s. If no alias is
  provided, the name from the database (name.s) is used. This subset
  uses properties from database set name.s. If NOFIT is given, this
  subset is not passed on to the least-squares fitting routine, and is
  used only for evaluation purposes.

  The MASK commands apply a mask to remove some items from the
  subset. The items indicated in the mask command are used in the
  training set and the others are deactivated. Four versions of the
  MASK command exist. If RANGE, indicate a range starting at start.i
  to the end of the subset. If end.i is given, stop at end.i. If
  setp.i is given, use that as step. If ITEMS, indicate the items from
  the subset in the training set one by one. If PATTERN, repeat a
  pattern over the items of the subset. item1.i. 0 means the item is
  not used and 1 means it is used. If ATOMS, deactivate all items in
  the subset that have atoms other than those that are target of ACP
  development (requires using a previous ATOM command).

  The remaining commands are used to set the weights of the items in
  the subset. The keywords are:

  - The global weight (WEIGHT_GLOBAL) applies equally to all elements
    in the set. Default: 1.

  - The WEIGHT_PATTERN is a pattern applied to the elements of the set
    in sequence. For instance, a pattern of 1 5 4 applies a weight of
    1 to the first element, 5 to the second, 4 to the third, 1 to the
    fourth, etc.

  - NORM_REF: divide all weights by the mean absolute reference
    value of each set.

  - NORM_NITEM: divide all weights by the number of items in each
    set.

  - NORM_NITEMSQRT: divide all weights by the square root of the
    number of items in each set.

  - WEIGHT_ITEM i1.i w1.r ...: give specific weights to individual
    items in the set. Note that if a mask is also given, the item
    numbers correspond to the set after the mask is applied.

  The final weight of an item is either the value given by the
  WEIGHT_ITEM keyword or the product of the GLOBAL weight, times the
  PATTERN weight corresponding to the item, divided by the
  normalization factors indicated by the corresponding keywords.

EMPTY method.s

  Set the approximate method that is the target of the ACP.

ADD method.s [FIT]

  Define an additional constant contribution to the energy from method
  method.s. If the FIT keyword follows the method, then the
  contribution enters the fitting procedure and is treated as an
  additional column in the least-squares fit.

DESCRIBE

  Describe the training set. Calculate the number of calculations
  still missing from the database for ACP development.

LIST DIN_TRAINING [directory.s]

  Write din files for all subsets of the current training set. If
  directory.s is given, write them in that directory.

* Evaluations

ACPEVAL name.s [output.s]

  Evaluate the ACP with name name.s on the current training set. If an
  ACP with that name does not exist, try to find an ACP file with that
  name and evaluate it. If output.s is given, write the output to that
  file instead of the standard output

EMPTYEVAL [output.s]

  Evaluate the empty for the current training set. If output.s is
  given, write the output to that file instead of the standard output

* Structure writers and result readers

WRITE
  METHOD method.s
  ACP acp.s
  SET set.s
  DIRECTORY dir.s
  PACK ipack.i
  PROGRAM {gaussian|psi4}
END

  Write the structures in the given set to input or structure
  files. If no METHOD is given, write structure files (xyz format for
  molecules). Otherwise, write input files appropriate for evaluating
  that method according to the database. If ACP is present, use the
  ACP in the input files (no effect if writing structure files).

  If SET is not present, write all the structures in the training
  set. If no SET is present and the training set has not been defined,
  write all the structures in the database. If SET is present and is
  one of the training set alias, write the training set structures
  under that alias. If SET is present but it is not a traning set
  alias (or the training set has not been defined), write the
  structures in the database set with that name.

  The files are written to directory dir.s (default: ./). If PACK is
  present, create tar.xz compressed archives with at most ipack.i
  structures each (only if the number of structures is greater than
  ipack.i). The PACK keyword invokes the tar utility through a
  system() call.

  The PROGRAM keyword selects the program for which the inputs are
  written. Only Gaussian and psi4 are available for now. psi4 cannot
  be used with ACPs.

READ file.s
  SET set.s
  COMPARE method.s
  INSERT method.s
END

  Read calculated properties from file.s. This file must have lines of
  the form:

    structure1.s value1.r
    structure2.s value2.r
    ...

  where structurex.s are structure identifiers from the database and
  valuex.r are the calculated values (typically, energies) for those
  structures. The structure names are the same as the root of the file
  names generated using WRITE, so this file can be easily generated
  with utilities such as grep or awk. Blank lines and comments (#) are
  ignored. Only the first two fields in each line are read; the rest
  are ignored.

  If no SET is present, the input data corresponds to the whole
  training set. If no SET is present and the training set has not been
  defined, the data corresponds to the whole database.  If SET is
  present and is one of the training set alias, the data corresponds
  to the entries under that alias. If SET is present but it is not a
  traning set alias (or the training set has not been defined), the
  data corresponds to the database set with that name.

  If COMPARE is present, compare the data in file.s against method
  method.s, which is taken as reference for the comparison. If INSERT
  is present, insert the calculated properties into the database as
  evaluations of method method.s (SET is not used by INSERT).

WRITE TERMS
  METHOD method.s
  SET set.s
  DIRECTORY dir.s
  PACK ipack.i
END

  Write the structures in the given set to input files for the
  calculation of the ACP terms in the training set. If no METHOD is
  given, use the training set empty.

  If SET is not present, write all the structures in the training
  set. If SET is present, write the training set structures under that
  alias.

  The files are written to directory dir.s (default: ./). If PACK is
  present, create tar.xz compressed archives with at most ipack.i
  structures each (only if the number of structures is greater than
  ipack.i). The PACK keyword invokes the tar utility through a
  system() call.

  For now, terms can be written only as Gaussian inputs.

READ TERMS file.s
  METHOD method.s
END

  Read calculated ACP terms from file.s for method method.s. If no
  method is given, the empty method for the current training set is
  used. The file must have lines of the form:

    structure1.s value1.r
    structure2.s value2.r
    ...

  where structurex.s are structure identifiers from the database and
  valuex.r are the calculated values (typically, energies) for those
  structures. Several values must be given for each structure. To be
  inserted into the terms table in the database, the number of values
  given by the file for a structure must be the same as the number of
  ACP terms in the training set. The structure names are the same as
  the root of the file names generated using WRITE, so this file can
  be easily generated with utilities such as grep or awk. Blank lines
  and comments (#) are ignored. Only the first two fields in each line
  are read; the rest are ignored.

* High-level operations

INSERT DAT
 FILE datfile.s
 METHOD method.s
 [TERM zat.i l.i exp.r]
END

  Insert the data file datfile.s. To do this, the training set must be
  defined and the data file must contain exactly the same number of
  lines as properties in the training set, with one numerical value
  per line. If only METHOD is present, the data is inserted as an
  evaluation for that method on the training set. If TERM is given
  with valid atomic number (zat.i), angular momentum (l.i), and
  exponent (exp.r) from the training set, then the data is inserted as
  that term for the corresponding method. Due to the nature of this
  operation, avoid having NOFIT subsets in the training set when using
  INSERT DAT.

INSERT OLDDAT [directory.s] [NOREFERENCE]

  Insert data in bulk from old-style ACP data files. Requires the
  definition of a complete training set.

  The data files all reside in the indicated directory (in ./ if not
  given). This command first searches for the file called names.dat,
  and verifies that the names in it match with those in the current
  training set. This is done to ensure the integrity of the
  database. After this operation is complete, the following data is
  read and inserted:

  - ref.dat: evaluation of the reference method in the training
    set. The reference is not inserted if NOREFERENCE is present.

  - empty.dat: evaluation of the empty method in the training set.

  - x_y_z.dat, where x is the atom (lowercase symbol), y is the
    angular momentum (lowercase), and z is the exponent index. Insert
    the corresponding ACP term.

  In all cases, the insertion verifies that the file contains exactly
  the same number of entries as the current training set. Due to the
  nature of this operation, avoid having NOFIT subsets in the training
  set when using INSERT OLDDAT.

DUMP

  Write the octavedump.dat file for the LASSO fit corresponding to the
  current dataset.

* Quality of life keywords

TRAINING SAVE name.s

  Save the current training set definition to the connected database
  under name name.s.

TRAINING LOAD name.s

  Load the training set definition with name name.s from the connected
  database.

TRAINING DELETE [name.s]

  Delete the training set with name name.s from the database. If no
  name is given, delete all training sets.

TRAINING LIST

  List training sets from the database.

TRAINING CLEAR

  Clear the current training set.

* Database schema

-- copy over from the code --

own implementation of LASSO in c++

-------

clean up prepared statements
crystal inputs and outputs
build all the databases
automatic testing on github & upload zz_source

-------

- Robust running of Gaussian and other inputs?

2. Generate data set table for training set, with references

----- db-design.org

ADD [FIT] {method.s|method.i} 

  Define an additional constant contribution to the energy from the
  methods in Table 5 (e.g. dispersion). If the FIT keyword follows
  ADD, then the contribution enters the fitting procedure and is
  treated as an additional column.

WEIGHT set.s [GLOBAL w.r] [PATTERN w1.r w2.r w3.r w4.r...] [NORM_REF]
             [NORM_NITEM] [NORM_NITEMSQRT] [ITEM i1.i w1.r i2.i w2.r ...]

  Define the weight associated with a given set. The keywords are:

  - The global weight (GLOBAL) applies equally to all elements in the
    set. Default: 1.

  - The PATTERN is applied to the elements of the set in sequence. For
    instance, a pattern of 1 5 4 applies a weight of 1 to the first
    element, 5 to the second, 4 to the third, 1 to the fourth, etc.
    Default: 1 if this is a set named by the user, otherwise the
    database provides a default if the set comes from the database.

  - NORM_REF: divide all weights by the mean absolute reference
    value.

  - NORM_NITEM: divide all weights by the number of items in the
    set. 

  - NORM_NITEMSQRT: divide all weights by the square root of the
    number of items in the set.

  - ITEM i1.i w1.r ...: give specific weights to individual items in
    the set.

  The final weight of an item is either the value given by the ITEM
  keyword or the product of the GLOBAL weight, times the PATTERN
  weight corresponding to the item, divided by the normalization
  factors indicated by the corresponding keywords.

  If set.s is missing or if it is "*", then the command applies to all
  sets. This allows setting normalization factors to all defined sets.

  When the training set is constructed, the weights are renormalized so
  the sum of weights over the whole training set is equal to one.

* Information from database queries

LIST METHODS

  Write the list of known methods. At least, this list must contain
  the primary and alternate keys from Table 5.

LIST SETS

  Write the list of known sets. At least, the list must contain the
  primary and alternate keys from Table 3.

LIST STRUCTURES [set.s]

  Write the list of known molecular and crystal structures. If set.r
  is given, write the structures that belong to that set only.

LIST PROPERTIES [set.s]

  Write the list of properties from table 6. At least, the table
  should contain the primary and alternate keys, the corresponding
  set, and the ordinal the property occupies in the
  set. Desirable: list of reference methods with which the properties
  have been calculated. If set.s is given, write the properties that
  belong to that set only.

LIST DATASET [BIBTEX]

  Write the current dataset. The output includes:

  - A list of the atoms that are target of the ACP, including the
    maximum angular momentum, the exponents, the target approximate
    method, and all the additional energy contributions.

  - A table of the sets in the training set. This table indicates
    whether a set is known to the database or named by the
    user. Includes the number of items in the set and, if available,
    the description from table 3 and the reference from
    table 1. Includes the glboal weight for this set, the weight
    pattern and normalization factors, and whether specific items have
    had their weight modified.

  - Each item in the training set is listed next, including the primary
    and alternate key from table 6, the named set it belongs to,
    the reference method, and the associated weight.

  If BIBTEX is present, generate a list of bibtex references for all
  sets in the current training set.

LIST GEOMETRIES [DATASET|set.s]

  Dump all the molecular and crystal structures in the current
  database to xyz and cif files. If set.s is given, write the
  geometries for that set only. If DATASET is given, write the
  geometries in the current training set only.

LIST TERMS [SET set.s] [METHOD method.s]

  List known ACP terms for set set.s and/or method method.s. If neither
  SET nor METHOD is given, list all the ACP terms known in the
  database.

* Inserting and deleting database information

INSERT CITATION ref.s
  AUTHOR ... 
  TITLE ...
  JOURNAL ... 
  VOLUME ...
  PAGE ...
  YEAR ...
  LINK ... 
  DESCRIPTION ... 
END

  Insert a new citation into the database (table 1).

DELETE CITATION {key.s|key.i}

  Delete a citation using the alternate or primary key.

INSERT PROPERTY prop.s
  NAME ... 
  DESCRIPTION ...
  RECIPE ... 
END

  Insert a new property into the database.

DELETE PROPERTY {key.s|key.i}

  Delete a property using the alternate or primary key.

INSERT METHOD name.s
 PROGRAM program.s
 EXECUTION execution.s
 READIN readin.s
 CITATION {key.s|key.i}
 ...
 KEYWORD key1.s value1.s
 KEYWORD key2.s value2.s
 ...
END

  Define a new calculation method. Inserts information into tables 5,
  5a, and 5b. This can be used for approximate, additional, or
  reference methods.

DELETE METHOD {key.s|key.i}

  Delete a calculation method.

INSERT SET name.s
  PROPERTY {prop.s|prop.i}
  DESCRIPTION ...
  CITATION ...
  [CITATION ...]
  ITEM file1.s
  ITEM file2.s
  ...
  ENTRY coef1.r item1.i coef2.r item2.i ... [ref1.r]
  ENTRY coef1.r item1.i coef2.r item2.i ... [ref2.r]
  ...
  ENTRYDB {key.s|key.i} ref.r
  ...
  DIN dinfile.s
END

  Insert a new set into the database with name name.s. Either list the
  items and entries one by one or using a din file. Reads the
  structures from the corresponding files and inserts the items in
  table 4 (ITEM).  Reads the calculated properties (ENTRY) and inserts
  them into table 6. Insert the corresponding entries in Table 7 as
  well (with reference = "*"). If name.s already exists, append the
  new data to the existing set. ENTRYDB can be used to insert
  reference data (with method "*") for an existing set or parts of it
  into Table 7.

DELETE SET {set.s|set.i}

  Delete a set (Table 3) and all the associated structures (Table 4)
  and entries (Table 6).

DELETE STRUCTURE {stru.s|stru.i}

  Delete an entry from Table 4.

DELETE ENTRY {entry.s|entry.i}

  Delete an entry from Table 6.  

* Generate input files, read output files

WRITE [METHOD method.s] [ACP acp.s] [SET set.s] [DIRECTORY dir.s] 

  Write the input files corresponding to the current training set and
  current approximate method (EMPTY). If METHOD is given, use method.s
  instead of the empty. If SET is given, use set set.s
  only. If ACP is given, include the ACP in the input files. If
  DIRECTORY is given, place the input files in directory dir.s.

READ [SET set.s] [COMPARE method.s] [FILE file.s] [DIRECTORY dir.s] 
                 [INSERT method.s] [ACP acp.s]

  Read the outputs corresponding to the current training set and
  compare to the original data. If SET is given, consider only set
  set.s. If COMPARE is given, compare to method.s instead of the
  original reference data. If DIRECTORY is given, read them from
  directory dir.s. If FILE is given, read them from summary file
  file.s. If INSERT is given, enter the corresponding items into table
  7 using method method.s. If the entries already exist, verify the
  value is within an acceptable threshold.  If ACP is given,
  compare the results to the linear model given by the current dataset
  applied to ACP acp.s.

  This command flags failed calculations for the user.

WRITE TERMS [SET set.s] [DIRECTORY dir.s]

  Write the input files corresponding to the ACP term calculations for
  set.s using the current dataset. If SET is given, use only set.s;
  otherwise, use the whole training set. If DIRECTORY is given, place
  the input files in directory dir.s.

READ TERMS [SET set.s] [FILE file.s] [DIRECTORY dir.s] [INSERT]

  Read the ACP term outputs corresponding to the current dataset. If
  SET is given, use set set.s instead of the whole training set. If
  DIRECTORY is given, read them from directory dir.s. If FILE is
  given, read them from summary file file.s. If INSERT is given, enter
  the corresponding ACP term information into table 8. If the entries
  already exist, verify the value is within an acceptable threshold.

  This command flags failed calculations for the user.

DUMP

  Write the octavedump.m file for the LASSO fit corresponding to the
  current dataset.

WRITE NONLIN [SET set.s] [METHOD method.s] [DIRECTORY dir.s]

  Write input files for the evaluation of non-linearity error in the
  current dataset. If SET is given, use set set.s instead of the whole
  tranining set. If METHOD is given, use approximate method
  method.s. If DIRECTORY is given, write the files to directory dir.s.

READ NONLIN [SET set.s] [DIRECTORY dir.s] [FILE file.s] [INSERT]

  Read the output files for the evaluation of non-linearity error in
  the current dataset. If SET is given, use set set.s instead of the
  whole training set. If DIRECTORY is given, read the output files
  from directory dir.s. If FILE is given, read the output data summary
  from file file.s. The maximum coefficients for each ACP terms are
  calculated with this command. If INSERT is present, insert the
  maximum coefficient information into the database.

  This command flags failed calculations for the user.

* ACP operations

ACP name.s file.acp
ACP name.s
 atom.s l.s exp.r value.r
 ...
END
  
  Define a named ACP from file file.acp (in Gaussian-style
  format). Alternatively, give all ACP terms one by one.

WRITE ACP name.s file.acp

  Write the ACP name.s to file file.acp (Gaussian-style format).

INFO ACP name1.s [name2.s ...]

  Print information about the ACP name.s, such as the 1-norm, 2-norm,
  etc. If more than one ACP is given, print information about all of
  them as well as ACP distances.

ACP SPLIT name.s nametemplate.s [COEF value.r]

  Split the ACP name.s into several ACPs, with names given by
  nametemplate.s followed by an integer. Each new ACP contains only
  one term from the original ACP. If COEF is given, set the
  coefficients for the new ACPs to value.r

ACP EVAL acp.s [SET set.s]

  Evaluate ACP acp.s using the linear model specified by the current
  dataset. If SET is given, only for set set.s.

--- Operations to implement ---

* Dataset definition

1. Define target atoms for the ACP
2. Define the subsets/items of the training set
3. Define ACP exponent values
4. Define reference data level
5. Define weights, perhaps with weight scheme suggestions
6. Define approximate method that is the target for the ACP
7. Define additional energy contributions, maybe marked as active for the fit

* Subsets:

1. Define named sets from items of the database and subsets of the training set

* Database: entry and subset definitions

9. Write xyz/cif files corresponding to an item/subset

* Database: reference data

1. Register a new reference calculation method
2. Delete a reference calculation method
3. Generate input files for reference calculations (item/subset)
4. Read output files and calculate reference data (item/subset)
5. Read user-formatted reference data (item/subset)
6. Insert reference data into the database (item/subset)
7. Verify entry in the database (item/subset)
8. List reference data (item/subset)
9. Validate the templates for a calculation method entry in database

* Database: approximate methods & additional energy contributions

1.  Register a new approximate method as target for ACP development
2.  Register a new additional energy contribution
3.  Delete an approximate method
4.  Delete an additional energy contribution
5.  Generate input files for empty calculations (item/subset)
6.  Generate input files for additional energy contributions (item/subset)
7.  Read output files and calculate empty stats, maybe w additional contributions (item/subset)
8.  Read user-formatted data for empty or additoinal contributions (item/subset)
9.  Insert empty data into the database (item/subset)
10. Insert additional contribution data into the database (item/subset)
11. Verify approximate method entry in the database (item/subset)
12. Verify additional contribution entry in the database (item/subset)
13. List empty/additional contribution data (item/subset)
14. Validate the templates for a calculation method entry in database

* Database: ACP term evaluations

1. Generate input files for ACP term evaluations (item/subset)
2. Read output files and calculate ACP terms (item/subset)
3. Read user-formatted ACP term data (item/subset)
4. Insert ACP term data into the database (item/subset)
5. Verify ACP term data (item/subset)
6. List known ACP terms (item/subset)

* Database: ACP fitting

1. Write the octavedump.m file for the LASSO fit

* ACP operations (basic)

1. Read an ACP in Gaussian-style format
2. Read an ACP from a Gaussian/crystal input file
3. Read an ACP from user-formatted specification
4. Write an ACP in Gaussian-style format
5. Calculate the 1-norm, etc. of an ACP
6. Calculate the 1-distance, etc. of two or more ACPs
7. Separate an ACP with n terms into n ACPS with 1 term each

* ACP operations (require dataset)

1. Evaluate an ACP using the linear model from the current dataset
2. Generate input files for self-consistent evaluation of an ACP (item/subset)
3. Read output files and calculate self-consistent ACP stats (item/subset)
4. Compare self-consistent ACP to linear model stats (item/subset)
5. Generate input files for non-linearity error evaluation in individual ACP terms
6. Process output for non-linearity error evaluation and generate maxcoef file
7. Enter maximum coefficient information into the database
8. List maximum coefficient information in the database
9. Delete maximum coefficient information from the database
??10. Sensitivity analysis/cross-validation of an ACP using the linear model : reqs' lasso.m??

* Miscellaneous auxiliary operations

1. Process a list of calculations and flag failed calcs (item/subset)
2. Generate data set table for training set, with references

* Topics to examine

- Robust running of Gaussian and other inputs

