#+STARTUP: showeverything

* Command-line syntax

apcfit -h [inputfile [outputfile]]

The input file is a keyword-driven case-insensitive text
file. Comments are #. If the input or the output file are not present,
stdin and stdout are used. If the output file is not present, stdout
is used.

* Definitions

- Structure: the structural information about a molecule or crystal.

- Property: a quantity calculable by running a few molecular or
  crystal calculations and that is linear in the total energies. 

- Method: a method for the calculation of a property. Can be a
  "reference method" (expensive and/or from the literature), an
  approximate method (usually the target of ACP fitting), or an
  additional method (additional contributions to the energy, like a
  dispersion correction).

- Set: a group of properties, usually from an article in the
  literature and calculated with a reasonably good method.

- Traning set: the set of all properties that are used for ACP
  development. Comprises one or more sets.

- Dataset: the training set plus additional information such as atoms,
  angular momentum channels, etc. The dataset completely determines
  the ACP fitting problem.

Whenver set names are required, an asterisk stands for the current
training set. When a method name is required, an asterisk stands for
the method used in the original reference.

* Keywords (database build)

CREATE acpdb_file.s

  Creates an empty database in file acpdb_file.s.

CONNECT acpdb_file.s

  Connects to the database file acpdb_file.s.

DISCONNECT

  Disconnect the current database.

INSERT LITREF ref.s
  AUTHORS ... 
  TITLE ...
  JOURNAL ... 
  VOLUME ...
  PAGE ...
  YEAR ...
  DOI ... 
  DESCRIPTION ... 
END

  Insert a new literature reference into the database (table 1), with
  key ref.s. The key and the DOI must be unique.

INSERT LITREF BIBTEX bibfile.s

  Insert the literature references contained in bibtex file
  bibfile.s. Only entries of type article are inserted.

DELETE LITREF [key.s|key.i]

  Delete a literature reference using the reference key or id
  number. If no key is given, delete all literature references.

LIST LITREF [BIBTEX]

  List the literature references in the database. If the BIBTEX
  keyword is used, write the list of literature referneces in bibtex
  format.

INSERT SET name.s
  PROPERTY_TYPE {prop.s|prop.i}
  DESCRIPTION ...
  LITREFS {ref1.s|ref1.i} {ref2.s|ref2.i} ...
END

  Insert a set with name name.s in the database. The set calculates
  property prop.s/prop.i from Property_types and has nstruct.i
  structures. One or more references from Table 1 can be given by id
  or key.

INSERT SET name.s
  PROPERTY_TYPE {prop.s|prop.i}
  DESCRIPTION ...
  LITREFS {ref1.s|ref1.i} {ref2.s|ref2.i} ...

  XYZ xyz1.s xyz2.s xyz3.s ...  
  ... or ...
  XYZ directory.s regexp.s
END

Add the set with name name.s in the same way as above. In addition,
belonging to this set, add structures corresponding to XYZ files
xyz1.s, etc. Alternatively, add all files in directory directory.s
that match the regular expression regexp.s (awk style). If regexp.s is
not given, add all xyz files.

Note: there is no facility for inserting db files because din files
are more efficient. In DB files, structures may be repeated in the
database.

INSERT SET name.s
  PROPERTY_TYPE {prop.s|prop.i}
  DESCRIPTION ...
  LITREFS {ref1.s|ref1.i} {ref2.s|ref2.i} ...

  DIN file.s 
  [METHOD method.s]
  [DIRECTORY directory.s]
END

Add the set with name name.s in the same way as above. In addition,
belonging to this set, add the structures indicated in the din
file. The xyz files are found in directory directory.s. If no
directory is given, use the current directory. Also, add the
corresponding properties and the corresponding evaluations with method
method.s. If no METHOD is given, the evaluations are not inserted.

DELETE SET [set.s|set.i]

  Delete a set (Table 3).

LIST SET

  List the known sets.

INSERT METHOD name.s
  COMP_DETAILS ...
  LITREFS {ref1.s|ref1.i} {ref2.s|ref2.i} ...
  DESCRIPTION ...
END    

  Insert a computational method with name name.s in the database. The
  method has computational details COMP_DETAILS. LITREFS: literature
  references. DESCRIPTION: a description of the method.

DELETE METHOD [method.s|method.i]

  Delete a method (Table 4).

LIST METHOD

  List the known methods.

INSERT STRUCTURE name.s
  XYZ file.s
  SET {set.s|set.i}
END

  Insert structure with key name.s from xyz file file.s. This
  structure belongs in set set.s/set.i.

DELETE STRUCTURE [struct.s|struct.i]

  Delete a structure (Table 5).

LIST STRUCTURE

  List the known structures.

INSERT PROPERTY name.s
  PROPERTY_TYPE {prop.s|prop.i}
  SET {set.s|set.i}
  ORDER order.i
  NSTRUCTURES nstruct.i
  STRUCTURES {s1.s|s1.i} {s2.s|s2.i} {s3.s|s3.i} ...
  COEFFICIENTS c1.r c2.r c3.r ...
END

  Insert property with key name.s. This property belongs in set
  set.s/set.i and involves nstruct.i structures, given by ids
  s1.s/s1.i, etc. The recipe for the calculation of the property uses
  coefficients c1.r, etc. This system is number order.i in the set.

DELETE PROPERTY [name.s|name.i]

  Delete a property (Table 6).

LIST PROPERTY

  List the known properties.

INSERT EVALUATION
  METHOD {method.s|method.i}
  PROPERTY {prop.s|prop.i}
  VALUE value.r
END

  Insert evaluation into the database. Corresponds to the evaluation
  of property prop.s/prop.i with method method.s/method.i. The
  evaluation yields the value value.r (energies in kcal/mol).

DELETE EVALUATION id.i

  Delete an evaluation by ID (Table 7).

LIST EVALUATION

  List the known evaluations.

INSERT TERM
  METHOD {method.s|method.i}
  PROPERTY {prop.s|prop.i}
  ATOM z.i
  L l.i
  EXPONENT exp.r
  VALUE value.r
  MAXCOEF maxcoef.r
END

  Insert term into the database. Corresponds to the ACP term
  calculated with method method.s/method.i on property
  prop.s/prop.i for atom with atomic number z.i, angular momentum
  channel with l = l.i, and exponent exp.r. The value is value.r
  (energies in kcal/mol). If available, the
  maximum coefficient for this term can also be given (maxcoef.r).

DELETE TERM 

  Delete all terms.

LIST TERM

  List the known terms.

VERIFY

  Check the consistency of the database. Specifically, check that the
  unhandled BLOBs and TEXTs refer to keys that exist.

LIST XYZ
 [DIRECTORY directory.s]
 [SET {set1.s|set1.i} {set2.s|set2.i} ...]
END

  Write xyz files for all structures in the database. If directory.s
  is given, write them in that directory. If SET is given, only the
  structures in those sets are written. (Use XYZ_TRAINING to write the
  xyz files for a training set.)

LIST DIN
 [DIRECTORY directory.s]
 [SET {set1.s|set1.i} {set2.s|set2.i} ...]
 [METHOD method.s|method.i]
END

  Write din files for all subsets of the current training set. If
  directory.s is given, write them in that directory. If SET is given,
  write only the din files for those sets. Use method
  method.s/method.i to write the reference values, or 0 if method is
  not given. (Use DIN_TRAINING to write the din files for a training
  set.)

* Keywords (define the training set)

ATOM|ATOMS at1.s l1.i at2.s l2.i ... 

  Define the atoms for which ACPs will be fitted and the maximum
  angular momentum channel for each.

EXP|EXPONENT|EXPONENTS exp1.r exp2.r ... 

  List of exponents.

REFERENCE method.s

  Set the reference method to method.s for the whole training set.

SUBSET [alias.s]
 SET name.s
 NOFIT
 MASK RANGE start.i [end.i [step.i]]
 MASK ITEMS item1.i item2.i ...
 MASK PATTERN 0/1 0/1 ...
 MASK ATOMS
 WEIGHT_GLOBAL w.r
 WEIGHT_PATTERN w1.r w2.r w3.r w4.r...
 NORM_REF
 NORM_NITEM
 NORM_NITEMSQRT
 WEIGHT_ITEM i1.i w1.r i2.i w2.r ...
END

  Add a subset to the training set with alias alias.s. If no alias is
  provided, the name from the database (name.s) is used. This subset
  uses properties from database set name.s. If NOFIT is given, this
  subset is not passed on to the least-squares fitting routine, and is
  used only for evaluation purposes.

  The MASK commands apply a mask to remove some items from the
  subset. The items indicated in the mask command are used in the
  training set and the others are deactivated. Four versions of the
  MASK command exist. If RANGE, indicate a range starting at start.i
  to the end of the subset. If end.i is given, stop at end.i. If
  setp.i is given, use that as step. If ITEMS, indicate the items from
  the subset in the training set one by one. If PATTERN, repeat a
  pattern over the items of the subset. item1.i. 0 means the item is
  not used and 1 means it is used. If ATOMS, deactivate all items in
  the subset that have atoms other than those that are target of ACP
  development (requires using a previous ATOM command).

  The remaining commands are used to set the weights of the items in
  the subset. The keywords are:

  - The global weight (WEIGHT_GLOBAL) applies equally to all elements
    in the set. Default: 1.

  - The WEIGHT_PATTERN is a pattern applied to the elements of the set
    in sequence. For instance, a pattern of 1 5 4 applies a weight of
    1 to the first element, 5 to the second, 4 to the third, 1 to the
    fourth, etc.

  - NORM_REF: divide all weights by the mean absolute reference
    value of each set.

  - NORM_NITEM: divide all weights by the number of items in each
    set. 

  - NORM_NITEMSQRT: divide all weights by the square root of the
    number of items in each set.

  - WEIGHT_ITEM i1.i w1.r ...: give specific weights to individual
    items in the set. Note that if a mask is also given, the item
    numbers correspond to the set after the mask is applied.

  The final weight of an item is either the value given by the
  WEIGHT_ITEM keyword or the product of the GLOBAL weight, times the
  PATTERN weight corresponding to the item, divided by the
  normalization factors indicated by the corresponding keywords.

EMPTY method.s

  Set the approximate method that is the target of the ACP.

ADD method.s [FIT]

  Define an additional constant contribution to the energy from method
  method.s. If the FIT keyword follows the method, then the
  contribution enters the fitting procedure and is treated as an
  additional column in the least-squares fit.

DESCRIBE

  Describe the training set. Calculate the number of calculations
  still missing from the database for ACP development.

LIST XYZ_TRAINING [directory.s]

  Write xyz files for all structures in the current training set. If
  directory.s is given, write them in that directory.

LIST DIN_TRAINING [directory.s]

  Write din files for all subsets of the current training set. If
  directory.s is given, write them in that directory.

* ACP operations

ACP name.s file.acp
ACP name.s
 atom.s l.s exp.r coef.r
 ...
END
  
  Define a named ACP from file file.acp (in Gaussian-style
  format). Alternatively, give all ACP terms one by one.

WRITE ACP name.s [file.s]

  Write the ACP name.s to file file.s (Gaussian-style format). If no
  file is given, write it in human-readable format to the output.

ACPINFO name.s

  Print information about the given ACP, such as the 1-norm, 2-norm,
  etc. 

ACPSPLIT name.s template.s [COEF value.r]

  Split the ACP name.s into several ACPs, with names given by
  template.s followed by an integer and the extension .acp. Each new
  ACP contains only one term from the original ACP. If COEF is given,
  set the coefficients for the new ACPs to value.r.

* Evaluations

ACPEVAL name.s [output.s]

  Evaluate the ACP with name name.s on the current training set. If an
  ACP with that name does not exist, try to find an ACP file with that
  name and evaluate it. If output.s is given, write the output to that
  file instead of the standard output

EMPTYEVAL [output.s]

  Evaluate the empty for the current training set. If output.s is
  given, write the output to that file instead of the standard output


* High-level operations

INSERT OLDDAT [directory.s] [NOREFERENCE]

  Insert data in bulk from old-style ACP data files. Requires the
  definition of a complete training set.

  The data files all reside in the indicated directory (in ./ if not
  given). This command first searches for the file called names.dat,
  and verifies that the names in it match with those in the current
  training set. This is done to ensure the integrity of the
  database. After this operation is complete, the following data is
  read and inserted:

  - ref.dat: evaluation of the reference method in the training
    set. The reference is not inserted if NOREFERENCE is present.

  - empty.dat: evaluation of the empty method in the training set.

  - x_y_z.dat, where x is the atom (lowercase symbol), y is the
    angular momentum (lowercase), and z is the exponent index. Insert
    the corresponding ACP term.

  In all cases, the insertion verifies that the file contains exactly
  the same number of entries as the current training set.

* Quality of life keywords

TRAINING SAVE name.s

  Save the current training set definition to the connected database
  under name name.s.

TRAINING LOAD name.s

  Load the training set definition with name name.s from the connected
  database.

TRAINING DELETE [name.s]

  Delete the training set with name name.s from the database. If no
  name is given, delete all training sets.

SOURCE file.s

  Read and execute the commands in file.s . The current working
  directory is changed to the location of the file.

ECHO message.s

  Echo the message.

END

  Terminate the run.

* Database schema

** Table 1: literature references (Literature_refs)

  id          INTEGER PRIMARY KEY AUTOINCREMENT,
  key         TEXT UNIQUE NOT NULL,
  authors     TEXT,
  title       TEXT,
  journal     TEXT,
  volume      TEXT,
  page        TEXT,
  year        TEXT,
  doi         TEXT UNIQUE,
  description TEXT

** Table 2: property types (Property_types)

  id          INTEGER PRIMARY KEY AUTOINCREMENT,
  key         TEXT UNIQUE NOT NULL,
  description TEXT

** Table 3: sets

  id            INTEGER PRIMARY KEY AUTOINCREMENT,
  key           TEXT UNIQUE NOT NULL,
  property_type INTEGER NOT NULL,
  litrefs       TEXT,
  description   TEXT,
  FOREIGN KEY(property_type) REFERENCES Property_types(id) ON DELETE CASCADE

** Table 4: methods

  id            INTEGER PRIMARY KEY AUTOINCREMENT,
  key           TEXT UNIQUE NOT NULL,
  comp_details  TEXT,
  litrefs       TEXT,
  description   TEXT

** Table 5: structures

  id            INTEGER PRIMARY KEY AUTOINCREMENT,
  key           TEXT UNIQUE NOT NULL,
  setid         INTEGER NOT NULL,
  ismolecule    INTEGER NOT NULL,
  charge        INTEGER,
  multiplicity  INTEGER,
  nat           INTEGER NOT NULL,
  cell          BLOB,
  zatoms        BLOB NOT NULL,
  coordinates   BLOB NOT NULL,
  FOREIGN KEY(setid) REFERENCES Sets(id) ON DELETE CASCADE

** Table 6: properties

  id            INTEGER PRIMARY KEY AUTOINCREMENT,
  key           TEXT UNIQUE NOT NULL,
  property_type INTEGER NOT NULL,
  setid         INTEGER NOT NULL,
  orderid       INTEGER NOT NULL,
  nstructures   INTEGER NOT NULL,
  structures    BLOB NOT NULL,
  coefficients  BLOB NOT NULL,
  FOREIGN KEY(property_type) REFERENCES Property_types(id) ON DELETE CASCADE,
  FOREIGN KEY(setid) REFERENCES Sets(id) ON DELETE CASCADE

** Table 7: evaluations

  methodid      INTEGER NOT NULL,
  propid        INTEGER NOT NULL,
  value         REAL NOT NULL,
  PRIMARY KEY(methodid,propid)
  FOREIGN KEY(methodid) REFERENCES Methods(id) ON DELETE CASCADE,
  FOREIGN KEY(propid) REFERENCES Properties(id) ON DELETE CASCADE

** Table 8: terms

  methodid      INTEGER NOT NULL,
  atom          INTEGER NOT NULL,
  l             INTEGER NOT NULL,
  exponent      REAL NOT NULL,
  propid        INTEGER NOT NULL,
  value         REAL NOT NULL,
  maxcoef       REAL,
  PRIMARY KEY (methodid,atom,l,exponent,propid),
  FOREIGN KEY(methodid) REFERENCES Methods(id) ON DELETE CASCADE,
  FOREIGN KEY(propid) REFERENCES Properties(id) ON DELETE CASCADE

** Table 9: training set to property translation table (Training_set)

  id INTEGER PRIMARY KEY,
  propid INTEGER NOT NULL,
  FOREIGN KEY(propid) REFERENCES Properties(id) ON DELETE CASCADE

** Table 10: training set repository

  key TEXT PRIMARY KEY,
  size INTEGER NOT NULL,
  training_set BLOB NOT NULL

